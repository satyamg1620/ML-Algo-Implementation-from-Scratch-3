# -*- coding: utf-8 -*-
"""Q7_forecast.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QygJyzTuf4wJ3ioxCqF0boFIbPNbBJd6
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from linearRegression.linear_regression import LinearRegression
from linearRegression.metrics import *

import warnings
warnings.warn('Warning Message: This is a warning message')
warnings.simplefilter("ignore")

#TODO : Write here

url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/daily-min-temperatures.csv"

# Load the dataset
df = pd.read_csv(url, header=0, index_col=0, parse_dates=True, squeeze=True)

# Creating dataset
ds = pd.DataFrame(columns=[i for i in range(365)]+['y'])
for i in range(len(df) - 365):
    ds.loc[i] = list(df[i : i + 365]) + list(df[i + 365 : i + 366])
    pass

# Split the dataset into training and test sets
train_size = int(len(ds) * 0.8)
train, test = ds[0:train_size], ds[train_size:len(df)]

LR = LinearRegression(fit_intercept=True)
LR.fit_sklearn_LR(train.iloc[:, :-1],train.iloc[:, -1])
y_hat = LR.predict(test.iloc[:, :-1])

print('For Minimum Daily Temperatures dataset from Australia on Test Set: \n')
print('RMSE: ', rmse(y_hat, test.iloc[:, -1]))
print('MAE: ', mae(y_hat, test.iloc[:, -1]))
print("---------------------------")

# Forecating
y_forecat = []
data = pd.DataFrame(columns=[i for i in range(365)])
total_data = pd.DataFrame(columns=[i for i in range(365)])
data.loc[0] = pd.Series(test.iloc[0, :-1])
total_data.loc[0] = pd.Series(test.iloc[0, :-1])
for i in range(len(test)):
    a = LR.predict(data)
    y_forecat.append(a[0])
    data.loc[0] = pd.Series(list(data.iloc[0])[1:]+[a[0]])
    total_data.loc[i+1] = pd.Series(list(data.iloc[0])[1:]+[a[0]])
    pass

y_forecat = np.array(y_forecat)
print('For Minimum Daily Temperatures dataset from Australia Forecasting: \n')
print('RMSE: ', rmse(y_forecat, test.iloc[:, -1]))
print('MAE: ', mae(y_forecat, test.iloc[:, -1]))
print("---------------------------")

y_true =  pd.Series(np.array(test.iloc[:, -1]))
y_hat_ = pd.Series(np.array(y_hat))
y_forecast_ = pd.Series(np.array(y_forecat))

fig, (ax1, ax2) = plt.subplots(1, 2)
fig.suptitle('Comparison with true temperatures')
ax1.plot(y_true)
ax1.plot(y_hat_)
ax1.set_title('y_true VS y_hat')
ax1.legend(['y_true','y_hat'])

ax2.plot(y_true)
ax2.plot(y_forecast_)
ax2.set_title('y_true VS y_forecast')
ax2.legend(['y_true','y_forecast'])
fig.tight_layout()
fig.dpi = 150
plt.savefig('Plots/Question7/forecast.png')
fig.show()





 
