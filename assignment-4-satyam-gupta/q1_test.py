# -*- coding: utf-8 -*-
"""Q1_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qS8-5c3lwMfeY1LGlMIEVk-f-5K2bDZC
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from linearRegression.linear_regression import LinearRegression
from linearRegression.metrics import *
from time import process_time, time

np.random.seed(45)

N = 30
P = 5
X = pd.DataFrame(np.random.randn(N, P))
y = pd.Series(np.random.randn(N))
print(X.shape)

#Evaluating sklearn's implementation of linear regression
LR = LinearRegression(fit_intercept=True)
LR.fit_sklearn_LR(X,y)
y_hat = LR.predict(X)

print('For sklearn LinearRegression : \n')
print('RMSE: ', rmse(y_hat, y))
print('MAE: ', mae(y_hat, y))
print("---------------------------")

#Evaluating solution of linear regression using normal equations
LR = LinearRegression(fit_intercept=True)
LR.fit_normal_equations(X,y)
y_hat = LR.predict(X)

print('For linear regression using normal equations : \n')
print('RMSE: ', rmse(y_hat, y))
print('MAE: ', mae(y_hat, y))
print("---------------------------")

#Evaluating solution of linear regression using SVD
LR = LinearRegression(fit_intercept=True)
LR.fit_SVD(X,y)
y_hat = LR.predict(X)

print('For linear regression using SVD : \n')
print('RMSE: ', rmse(y_hat, y))
print('MAE: ', mae(y_hat, y))
print("---------------------------")

####FOR 50 FEATURES####
plt.figure(dpi=150)
time1 = []
time2 = []
time3 = []
no_of_runs = 50
sample = [i for i in range(500, 4000, 500)]
for i in range(500, 4000, 500):
    N = i
    P = 50
    X = pd.DataFrame(np.random.randn(N, P))
    y = pd.Series(np.random.randn(N))
    

    #Evaluating solution of linear regression using normal equations
    t = []
    for j in range(no_of_runs):
        t1_start = process_time()
        LR = LinearRegression(fit_intercept=True)
        LR.fit_normal_equations(X,y)
        t1_stop = process_time()
        y_hat = LR.predict(X)
        t.append(t1_stop - t1_start)
    time2.append(np.mean(t))

    #Evaluating solution of linear regression using SVD
    t = []
    for j in range(no_of_runs):
        t1_start = process_time()
        LR = LinearRegression(fit_intercept=True)
        LR.fit_SVD(X,y)
        t1_stop = process_time()
        y_hat = LR.predict(X)
        t.append(t1_stop - t1_start)
    time3.append(np.mean(t))

        #Evaluating sklearn's implementation of linear regression
    t = []
    for j in range(no_of_runs):
        t1_start = process_time()
        LR = LinearRegression(fit_intercept=True)
        LR.fit_sklearn_LR(X,y)
        t1_stop = process_time()
        y_hat = LR.predict(X)
        t.append(t1_stop - t1_start)
    time1.append(np.mean(t))


plt.plot(sample, time1)
plt.plot(sample, time2)
plt.plot(sample, time3)

plt.xlabel('No. of samples')
plt.ylabel('Time (in sec)')

plt.title('Comparison between Techniques with 50 features')
plt.legend(['Sklearn', 'Normal Equation', 'SVD'])
plt.savefig('Plots/Question1/50Features.png')
plt.show()



####FOR 1500 Datapoints####
plt.figure(dpi=150)
time1 = []
time2 = []
time3 = []
features = [i for i in range(10, 100, 10)]
for i in range(10, 100, 10):
    N = 1500
    P = i
    X = pd.DataFrame(np.random.randn(N, P))
    y = pd.Series(np.random.randn(N))
    

    #Evaluating solution of linear regression using normal equations
    t = []
    for j in range(no_of_runs):
        t1_start = process_time()
        LR = LinearRegression(fit_intercept=True)
        LR.fit_normal_equations(X,y)
        t1_stop = process_time()
        y_hat = LR.predict(X)
        t.append(t1_stop - t1_start)
    time2.append(np.mean(t))

    #Evaluating solution of linear regression using SVD
    t = []
    for j in range(no_of_runs):
        t1_start = process_time()
        LR = LinearRegression(fit_intercept=True)
        LR.fit_SVD(X,y)
        t1_stop = process_time()
        y_hat = LR.predict(X)
        t.append(t1_stop - t1_start)
    time3.append(np.mean(t))

    #Evaluating sklearn's implementation of linear regression
    t = []
    for j in range(no_of_runs):
        t1_start = process_time()
        LR = LinearRegression(fit_intercept=True)
        LR.fit_sklearn_LR(X,y)
        t1_stop = process_time()
        y_hat = LR.predict(X)
        t.append(t1_stop - t1_start)
    time1.append(np.mean(t))

plt.plot(features, time1)
plt.plot(features, time2)
plt.plot(features, time3)

plt.xlabel('No. of Features')
plt.ylabel('Time (in sec)')

plt.title('Comparison between Techniques with 1500 Datapoints')
plt.legend(['Sklearn', 'Normal Equation', 'SVD'])
plt.savefig('Plots/Question1/1500Datapoints.png')
plt.show()
