# -*- coding: utf-8 -*-
"""Q4_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dUjXq9nEOX2PMOboEnFAB_-x-hQGM49x
"""

import numpy as np
import matplotlib.pyplot as plt
from preprocessing.polynomial_features import PolynomialFeatures
from linearRegression.linear_regression import LinearRegression
import pandas as pd
import os.path
from os import path
from sklearn.preprocessing import PolynomialFeatures as pf
from sklearn.preprocessing import StandardScaler

np.random.seed(45)  #Setting seed for reproducibility

if not path.exists('Plots/Question4/'):
  os.makedirs('Plots/Question4/')

x = np.array([i*np.pi/180 for i in range(60,300,2)])
y = 3*x + 8 + np.random.normal(0,3,len(x))

#TODO : Write here
#Preprocess the input using the polynomial features
#Solve the resulting linear regression problem by calling any one of the 
#algorithms you have implemented.


deg = np.array([i for i in range(1, 15)])
coef = []
for i in deg:
  
  poly = PolynomialFeatures(degree=i, include_bias=True)
  X_poly = poly.transform(x)
  scaler = StandardScaler()
  X_poly = scaler.fit_transform(X_poly)
  LR = LinearRegression(fit_intercept=True)
  LR.fit_sklearn_LR(X_poly,y)
  coef.append(np.linalg.norm(LR.coef_))

plt.figure(dpi=150)
coef = np.array(coef)
plt.plot(deg, coef)
plt.plot(deg, coef, marker='o', color='red')
plt.title("Norm of Theta v/s Degree")
plt.xlabel("Degree")
plt.ylabel("Coefficient Norm")
plt.savefig('Plots/Question4/DegreePlot.png')
plt.show()

plt.figure(dpi=150)
plt.plot(deg, np.log(coef))
plt.plot(deg, np.log(coef), marker='o', color='red')
plt.title("Log Norm of Theta v/s Degree")
plt.xlabel("Degree")
plt.ylabel("Log of Coefficient Norm")
plt.savefig('Plots/Question4/DegreePlotLog.png')
plt.show()
