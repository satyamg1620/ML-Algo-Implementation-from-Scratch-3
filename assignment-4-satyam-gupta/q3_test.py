# -*- coding: utf-8 -*-
"""Q3_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dWm-EWFDEwI15WbGIT0_bUIrxolF7Z1G
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from linearRegression.linear_regression import LinearRegression
from os import path
import os
from linearRegression.metrics import predict, rss, rmse, mse
from matplotlib.animation import FuncAnimation
import matplotlib.animation as animation
import mpl_toolkits.mplot3d.axes3d as p3
plt.style.use('seaborn-pastel')

N=60
x = np.array([i*np.pi/180 for i in range(60,300,2)])
np.random.seed(10)
y = 3*x + 8 + np.random.normal(0,3,len(x)) 

X = pd.DataFrame(x)
y=pd.Series(y)
LR = LinearRegression(fit_intercept=True, X=pd.DataFrame(x), y=pd.Series(y))
if LR.fit_intercept:
    LR.coef_ = np.abs(np.random.randn(X.shape[1]+1)*10)
else:
    LR.coef_ = np.abs(np.random.randn(X.shape[1])*10)
LR.fit_gradient_descent(batch_size=40, gradient_type='JAX', penalty_type='l2',num_iters=10, lr=0.01)
fig1 = LR.plot_line_fit(X,y,LR.all_coef.iloc[0, 6],LR.all_coef.iloc[1,6])
fig2 = LR.plot_surface(X,y,LR.coef_[0],LR.coef_[1])
fig3 = LR.plot_contour(pd.Series(x),y,LR.coef_[0],LR.coef_[1])

def animate_contour_plot():
    
    x_ = np.linspace(-10, +10, 150)
    y_ = np.linspace(-10, +10, 150)
    t0, t1 = np.meshgrid(x_, y_)
    Z = np.zeros_like(t0)
    for i in range(t0.shape[0]):
        for j in range(t0.shape[1]):
            y_pred = predict(pd.DataFrame(x_), np.array([t0[i,j], t1[i,j]]), LR.fit_intercept)
            Z[i,j] = mse(pd.Series(y_pred), pd.Series(y_))
    
    fig, ax = plt.subplots()
    ax.contour(t0, t1, Z, cmap='coolwarm')
    ax.set_xlabel('Theta_0')
    ax.set_ylabel('Theta_1')
    point, = ax.plot([], [], 'o',color='black')
    
    def init():
        point.set_data([], [])
        # point.set_3d_properties(0, 'z')
        return point,
    
    def animate(i):
        y_p = predict(X, np.array([LR.all_coef.iloc[0, i], LR.all_coef.iloc[1, i]]), LR.fit_intercept)
        rs = mse(pd.Series(y_p), pd.Series(y))
        point.set_data([LR.all_coef.iloc[0, i]], [LR.all_coef.iloc[1, i]])
        # point.set_3d_properties(rs, 'z')
        # print(rs)
        return point,
    
    anim = FuncAnimation(fig, animate, init_func=init,
                         frames=LR.all_coef.shape[1], interval=100, blit=True)
    
    anim.save('Plots/Question3/contour_plot.gif', writer='imagemagick')
    plt.show()
    
    pass

def animate_surface_plot():
    x_ = np.linspace(max(LR.all_coef.loc[0])-10, max(LR.all_coef.loc[0])+10, 50)
    y_ = np.linspace(max(LR.all_coef.loc[1])-10, max(LR.all_coef.loc[1])+10, 50)
    t0, t1 = np.meshgrid(x_, y_)
    Z = np.zeros_like(t0)
    for i in range(t0.shape[0]):
        for j in range(t0.shape[1]):
            y_pred = predict(pd.DataFrame(x_), np.array([t0[i,j], t1[i,j]]), LR.fit_intercept)
            Z[i,j] = mse(pd.Series(y_pred), pd.Series(y_))
    
    fig = plt.figure()
    ax = fig.add_subplot(projection="3d")
    ax.plot_surface(t0, t1, Z, cmap='coolwarm', alpha=0.5)
    ax.set_xlabel('Theta_0')
    ax.set_ylabel('Theta_1')
    ax.set_zlabel('RSS')
    ax.view_init(elev=20, azim=-10)
    point, = ax.plot([], [], [], 'o',color='black')
    
    def init():
        point.set_data([], [])
        point.set_3d_properties(0, 'z')
        return point,
    
    def animate(i):
        y_p = predict(X, np.array([LR.all_coef.iloc[0, i], LR.all_coef.iloc[1, i]]), LR.fit_intercept)
        rs = mse(pd.Series(y_p), pd.Series(y))
        point.set_data([LR.all_coef.iloc[0, i]], [LR.all_coef.iloc[1, i]])
        point.set_3d_properties(rs, 'z')
        # print(rs)
        return point,
    
    anim = FuncAnimation(fig, animate, init_func=init,
                         frames=LR.all_coef.shape[1], interval=100, blit=True)
    
    anim.save('Plots/Question3/surface_plot.gif', writer='imagemagick')
    plt.show()


def animate_line_plot():
    fig = plt.figure()
    ax = plt.axes()
    line, = ax.plot([], [], lw=3)
    ax.scatter(X, y)
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    
    def init():
        line.set_data([], [])
        return line,
    def animate(i):
        y_p = predict(X, np.array([LR.all_coef.iloc[0, i], LR.all_coef.iloc[1, i]]), LR.fit_intercept)
        line.set_data(X, y_p)
        return line,
    
    anim = FuncAnimation(fig, animate, init_func=init,
                         frames=LR.all_coef.shape[1], interval=100, blit=True)
    anim.save('Plots/Question3/line_plot.gif', writer='imagemagick')

animate_line_plot()
animate_surface_plot()
animate_contour_plot()
